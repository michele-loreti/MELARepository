/* Generated By:JavaCC: Do not edit this line. MELAparser.java */
package ParserMELA;

import java.util.ArrayList;
import Actions.Action;
import Actions.EnvAction;
import Actions.InfAction;
import Actions.NoInfAction;
import Actions.PassAction;

import Model.Agent;
import Model.AgentManager;
import Model.ExpEvaluator;
import Model.GlobalManager;
import Model.Location;
import Model.LocationManager;
import Model.ParamManager;


public class MELAparser implements MELAparserConstants {

    public MELAparser() {
        this(new java.io.StringReader(""));
    }

    public void parseFromString( String modelDef ) throws ParseException, TokenMgrError, NumberFormatException {
        this.ReInit(new java.io.StringReader(modelDef));
        this.Input();
    }

    public void parseFromFile( String filename ) throws ParseException, TokenMgrError, NumberFormatException {
        try { this.ReInit(new java.io.FileReader(filename)); }
        catch(java.io.IOException e) {throw new ParseException("Error while opening file " + filename + ": " + e); }
        this.Input();
    }

/***********************************************
GRAMMAR RULES
***********************************************/
  final public void Input() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token space;
    boolean spaceboolean = false, agents = false, init = false;
     GlobalManager.init();
    jj_consume_token(SECTION_SPACE);
     spaceboolean = true;
    jj_consume_token(SEMICOLON);
    space = SpaceStructure();
     GlobalManager.getLocationManager().SpatialSt = space.image;
    GlobalManager.getLocationManager().MatrixLocationCreation();
    jj_consume_token(SECTION_PARAM);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Param();
    }
    jj_consume_token(SECTION_AGENTS);
         agents = true;
    label_2:
    while (true) {
      Agent();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SECTION_ENV:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(SECTION_ENV);
      EnvAgent();
    }
     GlobalManager.getAgentManager().MatrixAgentCreation();
     GlobalManager.getAgentManager().GlobalMatrixCreation();
    jj_consume_token(SECTION_INIT);
     init = true;
    Init();
      if (!agents && !init)
        {if (true) throw new ParseException("Some model sections are missing");}

    /*All the following lines are used to print the stored information in the console*/
    System.out.println("The chosen spatial structure is: " + GlobalManager.getLocationManager().SpatialSt);
    GlobalManager.PrintHashMap(GlobalManager.getParamManager().paramMap);
    GlobalManager.PrintNames(GlobalManager.getAgentManager().AgentNames);
    GlobalManager.PrintActions(GlobalManager.getAgentManager().Agents);
    GlobalManager.PrintLocations(GlobalManager.getLocationManager().AllLoc);
    GlobalManager.PrintInitCondition();
    GlobalManager.PrintNoZeroInitCondition();
    jj_consume_token(0);
  }

  final public void Param() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    t2 = jj_consume_token(DOUBLE);
    jj_consume_token(EOL);
       double value = Double.parseDouble(t2.image);
        if(value == Utility.Utility.ERROR_NUM) {
            {if (true) throw new ParseException("line " + t2.beginLine + " colum " + t2.beginColumn +": "+t1.image +" not correctly defined!");}
        }
        GlobalManager.getParamManager().addParam(t1.image, value);
  }

  final public void Agent() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    Agent agent;
    t = jj_consume_token(IDENTIFIER);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      jj_consume_token(LR);
      jj_consume_token(KEYWORD_LOC);
      jj_consume_token(RR);
    }
     agent = new Agent(t.image);
    jj_consume_token(DEFINE);
    Action(agent);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      jj_consume_token(PLUS);
      Action(agent);
    }
    jj_consume_token(EOL);
  }

  final public void EnvAgent() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    Agent agent;
    t = jj_consume_token(IDENTIFIER);
     agent = new Agent(t.image);
    jj_consume_token(DEFINE);
    EnvAction(agent);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      jj_consume_token(PLUS);
      EnvAction(agent);
    }
    jj_consume_token(EOL);
  }

/*  So far problem solved without using this part

void Env() throws NumberFormatException, RuntimeException, ParseException :
{
    Token t;
    Env agent;
}
{
    t = <IDENTIFIER>
    {AgentManager.addAgentName(t.image);
     agent = new Agent(t.image);}
    <DEFINE>
    EnvAction(agent) 
    (
        <PLUS> 
        EnvAction(agent) 
    )* 
    <EOL>
}
*/
  final public Token SpaceStructure() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token spaceKey=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_GRAPH:
    case KEYWORD_ONED:
    case KEYWORD_TWOD:
    case KEYWORD_THREED:
      if (jj_2_1(2)) {
        spaceKey = jj_consume_token(KEYWORD_GRAPH);
          setGraph();
      } else if (jj_2_2(2)) {
        spaceKey = jj_consume_token(KEYWORD_ONED);
         setOneD();
      } else if (jj_2_3(2)) {
        spaceKey = jj_consume_token(KEYWORD_TWOD);
         setTwoD();
      } else if (jj_2_4(2)) {
        spaceKey = jj_consume_token(KEYWORD_THREED);
         setThreeD();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
      {if (true) return spaceKey;}
    throw new Error("Missing return statement in function");
  }

  final public Token InfSet() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token set=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_LOC:
    case KEYWORD_NEIGH:
    case KEYWORD_ALL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_LOC:
        set = jj_consume_token(KEYWORD_LOC);
        break;
      case KEYWORD_NEIGH:
        set = jj_consume_token(KEYWORD_NEIGH);
        break;
      case KEYWORD_ALL:
        set = jj_consume_token(KEYWORD_ALL);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
      {if (true) return set;}
    throw new Error("Missing return statement in function");
  }

  final public Token InfSetEnv() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token set=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_ALL:
    case INT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        set = jj_consume_token(INT);
        break;
      case KEYWORD_ALL:
        set = jj_consume_token(KEYWORD_ALL);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
      {if (true) return set;}
    throw new Error("Missing return statement in function");
  }

  final public Token MelaSymbol() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token sym=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case TRIANGLE:
    case UP:
    case DOWN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        sym = jj_consume_token(DOT);
        break;
      case UP:
        sym = jj_consume_token(UP);
        break;
      case DOWN:
        sym = jj_consume_token(DOWN);
        break;
      case TRIANGLE:
        sym = jj_consume_token(TRIANGLE);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
      {if (true) return sym;}
    throw new Error("Missing return statement in function");
  }

  final public Token UpdateLoc() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token update=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_LOC:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_LOC:
        update = jj_consume_token(KEYWORD_LOC);
        break;
      case IDENTIFIER:
        update = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    {if (true) return update;}
    throw new Error("Missing return statement in function");
  }

  final public void Action(Agent agent) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LR:
    case LANG:
    case DASH:
      if (jj_2_5(2)) {
        NoInfAction(agent);
      } else if (jj_2_6(2)) {
        InfAction(agent);
      } else if (jj_2_7(2)) {
        PassAction(agent);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void NoInfAction(Agent agent) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token name = null, rateName = null, symbol=null, update=null, updateloc=null, update2=null, updateloc2=null;
    jj_consume_token(LR);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    rateName = jj_consume_token(IDENTIFIER);
    jj_consume_token(RR);
    symbol = MelaSymbol();
    update = jj_consume_token(IDENTIFIER);
    jj_consume_token(LR);
    updateloc = UpdateLoc();
    jj_consume_token(RR);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARALLEL:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(PARALLEL);
      update2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(LR);
      updateloc2 = UpdateLoc();
      jj_consume_token(RR);
    }
   if (update2 != null){
    Double rate = GlobalManager.getParamManager().getParamValue(rateName.image);
    String updateString = update.image;
    String update2String = update2.image;
    String[] updateArray = {updateString, update2String};
    NoInfAction ac = new NoInfAction(name.image, rate, symbol.image, updateArray);
    agent.addAction(ac);
      }else{
    Double rate = GlobalManager.getParamManager().getParamValue(rateName.image);
    String updateString = update.image;
    String[] updateArray = {updateString};
    NoInfAction ac = new NoInfAction(name.image, rate, symbol.image, updateArray);
    agent.addAction(ac);}
  }

  final public void InfAction(Agent agent) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token infset=null, name = null, rate = null, symbolInf = null, update=null, updatelocInf=null, update2=null, updatelocInf2=null, rangeNeigh = null;
    jj_consume_token(DASH);
    jj_consume_token(RANG);
    jj_consume_token(LBRAC);
    infset = InfSet();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(LR);
      rangeNeigh = jj_consume_token(INT);
      jj_consume_token(RR);
    }
    jj_consume_token(RBRAC);
    jj_consume_token(LR);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    rate = jj_consume_token(IDENTIFIER);
    jj_consume_token(RR);
    symbolInf = MelaSymbol();
    update = jj_consume_token(IDENTIFIER);
    jj_consume_token(LR);
    updatelocInf = UpdateLoc();
    jj_consume_token(RR);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARALLEL:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      jj_consume_token(PARALLEL);
      update2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(LR);
      updatelocInf2 = UpdateLoc();
      jj_consume_token(RR);
    }
     if (update2 != null && rangeNeigh!= null){
    int rangeNeighValue = Integer.parseInt(rangeNeigh.image);
    Double rateValue = GlobalManager.getParamManager().getParamValue(rate.image);
    String updateString = update.image;
    String update2String = update2.image;
    String[] updateArray = {updateString, update2String};
    InfAction ac = new InfAction(name.image, rateValue, infset.image, rangeNeighValue, symbolInf.image, updateArray);
    agent.addAction(ac);}else{
    if (update2 == null && rangeNeigh!= null){
    int rangeNeighValue = Integer.parseInt(rangeNeigh.image);
    Double rateValue = GlobalManager.getParamManager().getParamValue(rate.image);
    String updateString = update.image;
    String[] updateArray = {updateString};
    InfAction ac = new InfAction(name.image, rateValue, infset.image, rangeNeighValue, symbolInf.image, updateArray);
    agent.addAction(ac);}else{
    if (update2 != null && rangeNeigh == null){
    int rangeNeighValue = 1;
    String updateString = update.image;
    String update2String = update2.image;
    String[] updateArray = {updateString, update2String};
    Double rateValue = GlobalManager.getParamManager().getParamValue(rate.image);
    InfAction ac = new InfAction(name.image, rateValue, infset.image, rangeNeighValue, symbolInf.image, updateArray);
    agent.addAction(ac);}else{
    if (update2 == null && rangeNeigh == null){
    int rangeNeighValue = 1;
    Double rateValue = GlobalManager.getParamManager().getParamValue(rate.image);
    String updateString = update.image;
    String[] updateArray = {updateString};
    InfAction ac = new InfAction(name.image, rateValue, infset.image, rangeNeighValue, symbolInf.image, updateArray);
    agent.addAction(ac);}}}}
  }

  final public void PassAction(Agent agent) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token name = null, probName = null, update=null, updatelocPass=null, update2=null, updatelocPass2=null, updatelocInf2=null, symbolPass=null;
    jj_consume_token(LANG);
    jj_consume_token(DASH);
    jj_consume_token(LR);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    probName = jj_consume_token(IDENTIFIER);
    jj_consume_token(RR);
    symbolPass = MelaSymbol();
    update = jj_consume_token(IDENTIFIER);
    jj_consume_token(LR);
    updatelocPass = UpdateLoc();
    jj_consume_token(RR);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARALLEL:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      jj_consume_token(PARALLEL);
      update2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(LR);
      updatelocInf2 = UpdateLoc();
      jj_consume_token(RR);
    }
     if (update2 != null){
    Double prob = GlobalManager.getParamManager().getParamValue(probName.image);
    String updateString = update.image;
    String update2String = update2.image;
    String[] updateArray = {updateString, update2String};
    PassAction ac = new PassAction(name.image, prob, symbolPass.image, updateArray);
    agent.addAction(ac);}else{
    Double prob = GlobalManager.getParamManager().getParamValue(probName.image);
    String updateString = update.image;
    String[] updateArray = {updateString};
    PassAction ac = new PassAction(name.image, prob, symbolPass.image, updateArray);
    agent.addAction(ac);}
  }

  final public void EnvAction(Agent agent) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token infsetE=null, name=null, rateName=null, update, y=null,z=null, x1=null,y1=null,z1=null;
    jj_consume_token(DASH);
     int check = 0;
    jj_consume_token(RANG);
    jj_consume_token(LBRAC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LR:
      jj_consume_token(LR);
     check = 1;
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
     ArrayList<ArrayList<Integer>> infsetEnv = new ArrayList<ArrayList<Integer>>();
    infsetE = InfSetEnv();
     if (check == 0){
    infsetEnv = GlobalManager.getLocationManager().getAllLoc();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      y = jj_consume_token(INT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        z = jj_consume_token(INT);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RR:
      jj_consume_token(RR);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
     if (GlobalManager.getLocationManager().SpatialSt == "Graph"){
   int xValue = Integer.parseInt(infsetE.image);
   ArrayList<Integer> LocName = GlobalManager.createListOneD(xValue);
   infsetEnv.add(LocName);
   }else if(GlobalManager.getLocationManager().SpatialSt.matches("(?i).*OneD*")){
   int xValue = Integer.parseInt(infsetE.image);
   ArrayList<Integer> LocName = GlobalManager.createListOneD(xValue);
   infsetEnv.add(LocName);
   }else if(GlobalManager.getLocationManager().SpatialSt.matches("(?i).*TwoD*")){
   int xValue = Integer.parseInt(infsetE.image);
   int yValue = Integer.parseInt(y.image);
   ArrayList<Integer> LocName = GlobalManager.createListTwoD(xValue, yValue);
   infsetEnv.add(LocName);
    }else if(GlobalManager.getLocationManager().SpatialSt.matches("(?i).*ThreeD*")){
     int xValue = Integer.parseInt(infsetE.image);
     int yValue = Integer.parseInt(y.image);
     int zValue = Integer.parseInt(z.image);
     ArrayList<Integer> LocName = GlobalManager.createListThreeD(xValue,yValue,zValue);
     infsetEnv.add(LocName);
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LR:
        jj_consume_token(LR);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      x1 = jj_consume_token(INT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        y1 = jj_consume_token(INT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          z1 = jj_consume_token(INT);
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RR:
        jj_consume_token(RR);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
     if (GlobalManager.getLocationManager().SpatialSt == "Graph"){
   int xValue = Integer.parseInt(x1.image);
   ArrayList<Integer> LocName = GlobalManager.createListOneD(xValue);
   infsetEnv.add(LocName);
   }else if(GlobalManager.getLocationManager().SpatialSt.matches("(?i).*OneD*")){
   int xValue = Integer.parseInt(x1.image);
   ArrayList<Integer> LocName = GlobalManager.createListOneD(xValue);
   infsetEnv.add(LocName);
   }else if(GlobalManager.getLocationManager().SpatialSt.matches("(?i).*TwoD*")){
   int xValue = Integer.parseInt(x1.image);
   int yValue = Integer.parseInt(y1.image);
   ArrayList<Integer> LocName = GlobalManager.createListTwoD(xValue, yValue);
   infsetEnv.add(LocName);
    }else if(GlobalManager.getLocationManager().SpatialSt.matches("(?i).*ThreeD*")){
     int xValue = Integer.parseInt(x1.image);
     int yValue = Integer.parseInt(y1.image);
     int zValue = Integer.parseInt(z1.image);
     ArrayList<Integer> LocName = GlobalManager.createListThreeD(xValue,yValue,zValue);
     infsetEnv.add(LocName);
    }
    }
    jj_consume_token(RBRAC);
    jj_consume_token(LR);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    rateName = jj_consume_token(IDENTIFIER);
    jj_consume_token(RR);
    jj_consume_token(DOT);
    update = jj_consume_token(IDENTIFIER);
     Double rate = GlobalManager.getParamManager().getParamValue(rateName.image);
    String updateString = update.image;
    String[] updateArray = {updateString};
    EnvAction ac = new EnvAction(name.image, rate, infsetEnv, updateArray);
    agent.addAction(ac);
  }

  final public void Init() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    InitAgent();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARALLEL:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_12;
      }
      jj_consume_token(PARALLEL);
      InitAgent();
    }
  }

  final public void InitAgent() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t,x=null,y=null,z=null,n =null;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LR:
      jj_consume_token(LR);
      x = jj_consume_token(INT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        y = jj_consume_token(INT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          z = jj_consume_token(INT);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(RR);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(LSQ);
    n = jj_consume_token(INT);
    jj_consume_token(RSQ);
  if (x == null)
{if (!(GlobalManager.getAgentManager().AgentNames.contains(t.image))) {{if (true) throw new ParseException("The declared agent is not described in the section #Agents");}}
 int i = GlobalManager.getAgentManager().MatrixAgent.get(t.image);
 int j = 0;
 int InitNum = Integer.parseInt(n.image);
 GlobalManager.getAgentManager().GlobalMatrix[i][j] = InitNum;}
 else if (GlobalManager.getLocationManager().SpatialSt == "Graph")
   {{
   if (!(GlobalManager.getAgentManager().AgentNames.contains(t.image))) {{if (true) throw new ParseException("The declared agent is not described in the section #Agents");}}
   }
   int i = GlobalManager.getAgentManager().MatrixAgent.get(t.image);
   int xValue = Integer.parseInt(x.image);
   ArrayList<Integer> LocName = GlobalManager.createListOneD(xValue);
   {if (y == null && z ==null && GlobalManager.getLocationManager().AllLoc.contains(LocName))
   {int j = GlobalManager.getLocationManager().MatrixLoc.get(LocName);
   int InitNum = Integer.parseInt(n.image);
   GlobalManager.getAgentManager().GlobalMatrix[i][j]= InitNum;
   }else
   {
     {if (true) throw new ParseException("The input location does not exist");}}
    } }
  else if (GlobalManager.getLocationManager().SpatialSt.matches("(?i).*OneD*"))
    {{
    if (!(GlobalManager.getAgentManager().AgentNames.contains(t.image))) {{if (true) throw new ParseException("The declared agent is not described in the section #Agents");}}
    }int i = GlobalManager.getAgentManager().MatrixAgent.get(t.image);
     int xValue = Integer.parseInt(x.image);
     ArrayList<Integer> LocName = GlobalManager.createListOneD(xValue);
     int InitNum = Integer.parseInt(n.image);
     {if (y == null && z ==null && GlobalManager.getLocationManager().AllLoc.contains(LocName))
     {int j = GlobalManager.getLocationManager().MatrixLoc.get(LocName);
         GlobalManager.getAgentManager().GlobalMatrix[i][j]= InitNum;
     }else
     {
     {if (true) throw new ParseException("The input location does not exist");}}
     }
     }
       else if (GlobalManager.getLocationManager().SpatialSt.matches("(?i).*TwoD*"))
           {{
       if (!(GlobalManager.getAgentManager().AgentNames.contains(t.image))) {{if (true) throw new ParseException("The declared agent is not described in the section #Agents");}}
       }int i = GlobalManager.getAgentManager().MatrixAgent.get(t.image);
       int xValue = Integer.parseInt(x.image);
       {if (y==null)
         {{if (true) throw new ParseException("The input location does not exist");}}
       }
       int yValue = Integer.parseInt(y.image);
       int InitNum = Integer.parseInt(n.image);
       ArrayList<Integer> LocName = GlobalManager.createListTwoD(xValue, yValue);
       {if (z ==null && GlobalManager.getLocationManager().AllLoc.contains(LocName))
       { int j = GlobalManager.getLocationManager().MatrixLoc.get(LocName);
       GlobalManager.getAgentManager().GlobalMatrix[i][j]= InitNum;
       }else
       {
     {if (true) throw new ParseException("The input location does not exist");}}
       }
       }
             else if (GlobalManager.getLocationManager().SpatialSt.matches("(?i).*ThreeD*"))
             {{
         if (!(GlobalManager.getAgentManager().AgentNames.contains(t.image))) {{if (true) throw new ParseException("The declared agent is not described in the section #Agents");}}
         }int i = GlobalManager.getAgentManager().MatrixAgent.get(t.image);
         int xValue = Integer.parseInt(x.image);
         {if (y==null)
         {{if (true) throw new ParseException("The input location does not exist");}}
         }
         int yValue = Integer.parseInt(y.image);
         {if (z==null)
         {{if (true) throw new ParseException("The input location does not exist");}}
         }
         int zValue = Integer.parseInt(z.image);
         int InitNum = Integer.parseInt(n.image);
         ArrayList<Integer> LocName = GlobalManager.createListThreeD(xValue,yValue,zValue);
         {if (GlobalManager.getLocationManager().AllLoc.contains(LocName))
         {int j = GlobalManager.getLocationManager().MatrixLoc.get(LocName);
         GlobalManager.getAgentManager().GlobalMatrix[i][j]= InitNum;
         }else
         {
         {if (true) throw new ParseException("The input location does not exist");}}
         }
    }
  }

  final public void setGraph() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token v, v1, e, e1, w, w1;
    jj_consume_token(VERTICES);
    jj_consume_token(ASSIGN);
    jj_consume_token(LBRAC);
    v = jj_consume_token(INT);
     int vertexName = Integer.parseInt(v.image);
    GlobalManager.getLocationManager().AllLoc.add(GlobalManager.createListName(vertexName));
    GlobalManager.getLocationManager().prepareMap(GlobalManager.createListName(vertexName));
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      v1 = jj_consume_token(INT);
     int vertexName1 = Integer.parseInt(v1.image);
    GlobalManager.getLocationManager().AllLoc.add(GlobalManager.createListName(vertexName1));
    GlobalManager.getLocationManager().prepareMap(GlobalManager.createListName(vertexName1));
    }
    jj_consume_token(RBRAC);
    jj_consume_token(EOL);
    jj_consume_token(EDGES);
    jj_consume_token(ASSIGN);
    jj_consume_token(LBRAC);
    jj_consume_token(LBRAC);
    e = jj_consume_token(INT);
      int edgeName = Integer.parseInt(e.image);
    jj_consume_token(COMMA);
    e1 = jj_consume_token(INT);
      int edgeName1 = Integer.parseInt(e1.image);
    jj_consume_token(COMMA);
    w = jj_consume_token(DOUBLE);
      double weight = Double.parseDouble(w.image);
     ArrayList<Integer> list = GlobalManager.createListName(edgeName);
     ArrayList<Integer> list1 = GlobalManager.createListName(edgeName1);
     GlobalManager.getLocationManager().addNeighNode(list, list1);
     GlobalManager.getLocationManager().AssignWeight(list, list1, weight);
    jj_consume_token(RBRAC);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      jj_consume_token(LBRAC);
      e = jj_consume_token(INT);
      int edgeName2 = Integer.parseInt(e.image);
      jj_consume_token(COMMA);
      e1 = jj_consume_token(INT);
      int edgeName3 = Integer.parseInt(e1.image);
      jj_consume_token(COMMA);
      w1 = jj_consume_token(DOUBLE);
      double weight1 = Double.parseDouble(w1.image);
     ArrayList<Integer> list2 = GlobalManager.createListName(edgeName2);
     ArrayList<Integer> list3 = GlobalManager.createListName(edgeName3);
     GlobalManager.getLocationManager().addNeighNode(list2, list3);
     GlobalManager.getLocationManager().AssignWeight(list2, list3, weight1);
    }
    jj_consume_token(RBRAC);
    jj_consume_token(EOL);
  }

  final public void setOneD() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token x;
    jj_consume_token(LR);
    x = jj_consume_token(INT);
    int xValue = Integer.parseInt(x.image);
   GlobalManager.getLocationManager().OneD = xValue;
   GlobalManager.createAllLocOneD(xValue);
    jj_consume_token(RR);
  }

  final public void setTwoD() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token x, y;
    jj_consume_token(LR);
    x = jj_consume_token(INT);
    jj_consume_token(COMMA);
    y = jj_consume_token(INT);
    jj_consume_token(RR);
    int xValue = Integer.parseInt(x.image);
    int yValue = Integer.parseInt(y.image);
    GlobalManager.getLocationManager().TwoDx = xValue;
    GlobalManager.getLocationManager().TwoDy = yValue;
    GlobalManager.createAllLocTwoD(xValue, yValue);
  }

  final public void setThreeD() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token x, y, z;
    jj_consume_token(LR);
    x = jj_consume_token(INT);
    jj_consume_token(COMMA);
    y = jj_consume_token(INT);
    jj_consume_token(COMMA);
    z = jj_consume_token(INT);
    jj_consume_token(RR);
    int xValue = Integer.parseInt(x.image);
    int yValue = Integer.parseInt(y.image);
    int zValue = Integer.parseInt(z.image);
    GlobalManager.getLocationManager().ThreeDx = xValue;
    GlobalManager.getLocationManager().ThreeDy = yValue;
    GlobalManager.getLocationManager().ThreeDz = zValue;
    GlobalManager.createAllLocThreeD(xValue, yValue, zValue);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(LR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(KEYWORD_THREED)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(DASH)) return true;
    if (jj_scan_token(RANG)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(KEYWORD_TWOD)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(KEYWORD_ONED)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(LANG)) return true;
    if (jj_scan_token(DASH)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(KEYWORD_GRAPH)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MELAparserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x20000,0x0,0x40000000,0x40000000,0x3c00000,0x1c000000,0x1c000000,0x10000000,0x10000000,0x80000000,0x80000000,0x4000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400000,0x400000,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0xd0000,0xd0000,0x400000,0x400000,0x22020,0x8000,0x20,0x8000,0x8000,0x20,0x1000,0x1000,0x40,0x1000,0x20,0x1000,0x1000,0x40,0x8000,0x1000,0x1000,0x20,0x1000,0x1000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MELAparser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MELAparser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MELAparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MELAparser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MELAparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MELAparser(MELAparserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MELAparserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
