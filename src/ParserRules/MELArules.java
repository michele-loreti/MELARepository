/* Generated By:JavaCC: Do not edit this line. MELArules.java */
package ParserRules;

import java.util.ArrayList;
import Model.GlobalManager;
import Simulator.SimulatorMELA;

public class MELArules implements MELArulesConstants {

    public MELArules() {
        this(new java.io.StringReader(""));
    }

    public void parseFromString( String modelDef ) throws ParseException, TokenMgrError, NumberFormatException {
        this.ReInit(new java.io.StringReader(modelDef));
        this.Input();
    }

    public void parseFromFile( String filename ) throws ParseException, TokenMgrError, NumberFormatException {
        try { this.ReInit(new java.io.FileReader(filename)); }
        catch(java.io.IOException e) {throw new ParseException("Error while opening file " + filename + ": " + e); }
        this.Input();
    }

/***********************************************
GRAMMAR RULES
***********************************************/
  final public void Input() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token action, time_boundary, boundary = null, focus, runs = null, step;
    time_boundary = BoundChoice();
     GlobalManager.WhileMethod();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_BOUNDARY:
      jj_consume_token(KEYWORD_BOUNDARY);
      jj_consume_token(SEMICOLON);
      boundary = BoundaryOptions();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
     if (boundary == null){
    GlobalManager.getLocationManager().boundary = "periodic";}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SECTION_RUN:
      jj_consume_token(SECTION_RUN);
      jj_consume_token(ASSIGN);
      runs = jj_consume_token(INT);
     int runsint = Integer.parseInt(runs.image);
    GlobalManager.Runs = runsint;
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SECTION_NAME:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(SECTION_NAME);
      jj_consume_token(SEMICOLON);
      action = ActionChoice();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SECTION_FOCUS:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(SECTION_FOCUS);
      jj_consume_token(SEMICOLON);
      focus = jj_consume_token(IDENTIFIER);
     GlobalManager.SpecificType = focus.image;
    }
     String[] StringForMain = new String[1];
    StringForMain[0] = " ";
    if (runs == null){
    SimulatorMELA.main(StringForMain);
    System.out.println("Normal simulation");}
    jj_consume_token(0);
  }

  final public Token ActionChoice() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token type=null, nameAction= null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_ACTIVE:
    case KEYWORD_PASSIVE:
    case KEYWORD_NOINF:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_ACTIVE:
        type = jj_consume_token(KEYWORD_ACTIVE);
        nameAction = jj_consume_token(IDENTIFIER);
         GlobalManager.actionToTrack = nameAction.image;
         GlobalManager.actionChosenType = type.image;
        break;
      case KEYWORD_PASSIVE:
        type = jj_consume_token(KEYWORD_PASSIVE);
        nameAction = jj_consume_token(IDENTIFIER);
         GlobalManager.actionToTrack = nameAction.image;
         GlobalManager.actionChosenType = type.image;
        break;
      case KEYWORD_NOINF:
        type = jj_consume_token(KEYWORD_NOINF);
        nameAction = jj_consume_token(IDENTIFIER);
         GlobalManager.actionToTrack = nameAction.image;
         GlobalManager.actionChosenType = type.image;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
      {if (true) return type;}
      {if (true) return nameAction;}
    throw new Error("Missing return statement in function");
  }

  final public Token BoundChoice() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token bound=null, timeTotal=null, nameAgent, actionName=null, actionValue=null, x=null,y=null,z=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_TIME:
    case KEYWORD_POPULATION:
    case KEYWORD_POPLOC:
    case KEYWORD_ACTION:
      if (jj_2_1(2)) {
        bound = jj_consume_token(KEYWORD_TIME);
        jj_consume_token(SEMICOLON);
        jj_consume_token(WORD_TIME);
        jj_consume_token(ASSIGN);
        timeTotal = jj_consume_token(INT);
         GlobalManager.boundary = bound.image;
        int total = Integer.parseInt(timeTotal.image);
        GlobalManager.timeTotal = total;
        GlobalManager.WhileMethod();
      } else if (jj_2_2(2)) {
        bound = jj_consume_token(KEYWORD_POPULATION);
        jj_consume_token(SEMICOLON);
        nameAgent = jj_consume_token(IDENTIFIER);
         GlobalManager.boundary = bound.image;
        GlobalManager.nameAgentToTrack = nameAgent.image;
        GlobalManager.WhileMethod();
      } else if (jj_2_3(2)) {
        bound = jj_consume_token(KEYWORD_POPLOC);
        jj_consume_token(SEMICOLON);
        nameAgent = jj_consume_token(IDENTIFIER);
        jj_consume_token(LR);
        x = jj_consume_token(INT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          y = jj_consume_token(INT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            z = jj_consume_token(INT);
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(RR);
 if (!(GlobalManager.getAgentManager().AgentNames.contains(nameAgent.image))) {{if (true) throw new ParseException("The declared agent is not described in the section #Agents");}}

 if(GlobalManager.getLocationManager().SpatialSt == "Graph"){
   int xValue = Integer.parseInt(x.image);
   ArrayList<Integer> LocName = GlobalManager.createListOneD(xValue);
   if (y == null && z ==null && GlobalManager.getLocationManager().AllLoc.contains(LocName))
   {GlobalManager.boundary = bound.image;
    GlobalManager.nameAgentToTrack = nameAgent.image;
    GlobalManager.LocToTrack = LocName;
    GlobalManager.WhileMethod();
   }else
   {{if (true) throw new ParseException("The input location does not exist");}}
    }
  else if (GlobalManager.getLocationManager().SpatialSt.matches("(?i).*OneD*"))
    {int xValue = Integer.parseInt(x.image);
     ArrayList<Integer> LocName = GlobalManager.createListOneD(xValue);
     if (y == null && z ==null && GlobalManager.getLocationManager().AllLoc.contains(LocName))
     {GlobalManager.boundary = bound.image;
      GlobalManager.nameAgentToTrack = nameAgent.image;
      GlobalManager.LocToTrack = LocName;
      GlobalManager.WhileMethod();
      }else
      {{if (true) throw new ParseException("The input location does not exist");}}
      }
    else if (GlobalManager.getLocationManager().SpatialSt.matches("(?i).*TwoD*"))
           {if (y==null)
       {{if (true) throw new ParseException("The input location does not exist");}}
       int xValue = Integer.parseInt(x.image);
       int yValue = Integer.parseInt(y.image);
       ArrayList<Integer> LocName = GlobalManager.createListTwoD(xValue, yValue);
       if (z ==null && GlobalManager.getLocationManager().AllLoc.contains(LocName))
       {GlobalManager.boundary = bound.image;
        GlobalManager.nameAgentToTrack = nameAgent.image;
        GlobalManager.LocToTrack = LocName;
        GlobalManager.WhileMethod();
        }else
        {{if (true) throw new ParseException("The input location does not exist");}}
        }
         else if (GlobalManager.getLocationManager().SpatialSt.matches("(?i).*ThreeD*"))
           {int xValue = Integer.parseInt(x.image);
        if (y==null)
        {{if (true) throw new ParseException("The input location does not exist");}}
        int yValue = Integer.parseInt(y.image);
        if (z==null)
        {{if (true) throw new ParseException("The input location does not exist");}}
        int zValue = Integer.parseInt(z.image);
        ArrayList<Integer> LocName = GlobalManager.createListThreeD(xValue,yValue,zValue);
        if (GlobalManager.getLocationManager().AllLoc.contains(LocName))
        {GlobalManager.boundary = bound.image;
        GlobalManager.nameAgentToTrack = nameAgent.image;
        GlobalManager.LocToTrack = LocName;
        GlobalManager.WhileMethod();}else
        {{if (true) throw new ParseException("The input location does not exist");}}
        }
      } else if (jj_2_4(2)) {
        bound = jj_consume_token(KEYWORD_ACTION);
        jj_consume_token(SEMICOLON);
        actionName = jj_consume_token(IDENTIFIER);
        jj_consume_token(ASSIGN);
        actionValue = jj_consume_token(INT);
         GlobalManager.boundary = bound.image;
        GlobalManager.nameActionToCount = actionName.image;
        int value = Integer.parseInt(actionValue.image);
            GlobalManager.valueToCount = value;
        GlobalManager.WhileMethod();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
      {if (true) return bound;}
    throw new Error("Missing return statement in function");
  }

  final public Token BoundaryOptions() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token name=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_PERIODIC:
    case KEYWORD_BOUNCING:
    case KEYWORD_FIXED:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_PERIODIC:
        name = jj_consume_token(KEYWORD_PERIODIC);
         GlobalManager.getLocationManager().boundary = name.image;
        break;
      case KEYWORD_BOUNCING:
        name = jj_consume_token(KEYWORD_BOUNCING);
         GlobalManager.getLocationManager().boundary = name.image;
        break;
      case KEYWORD_FIXED:
        name = jj_consume_token(KEYWORD_FIXED);
         GlobalManager.getLocationManager().boundary = name.image;
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
      {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_4() {
    if (jj_scan_token(KEYWORD_ACTION)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(KEYWORD_POPULATION)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(KEYWORD_TIME)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(KEYWORD_POPLOC)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MELArulesTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400000,0x10000,0x4000,0x8000,0x1c0000,0x1c0000,0x0,0x0,0x1c200000,0x3800000,0x3800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MELArules(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MELArules(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MELArulesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MELArules(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MELArulesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MELArules(MELArulesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MELArulesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
